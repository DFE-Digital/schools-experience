name: Deploy to AKS
description: deploys application
inputs:
  environment:
    description: Environment to deploy to
    required: true
  sha:
    description: Commit sha to be deployed
    required: true
  azure-credentials:
    description: Credentials for azure
    required: true
  pr:
    description: Pull Request Reference
    required: false
  static:
    description: Static Route
    required: false
  KEY_VAULT:
    required: true
  ARM_ACCESS_KEY:
    required: true
  GITHUB_TOKEN:
    required: true
outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}
runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/aks/config/${{ inputs.environment }}.tfvars.json
        terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/terraform.tf | grep -o [0-9\.]*)
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "aks_app_environment=$(jq -r '.environment' ${tf_vars_file})" >> $GITHUB_ENV
        echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV
        echo "namespace=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV
        echo RUN_TEST="true" >> $GITHUB_OUTPUT
        if [ "${{inputs.environment }}" == "Review" ]
        then
            echo "control=review" >> $GITHUB_OUTPUT
            pr_name="${{env.REVIEW_APPLICATION}}-${{inputs.pr}}"
            echo "pr_name=${pr_name}" >> $GITHUB_OUTPUT
            echo "healthcheck=${pr_name}" >> $GITHUB_OUTPUT
            echo "key=${pr_name}" >> $GITHUB_OUTPUT
            echo "TF_VAR_paas_application_name=${pr_name}" >> $GITHUB_ENV
            echo "TF_VAR_static_route=${{ inputs.static }}" >> $GITHUB_ENV
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:review-${{steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi


        if [ "${{inputs.environment }}" == "development_aks" ]
        then
            echo "control=dev" >> $GITHUB_OUTPUT
            echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-dev" >> $GITHUB_OUTPUT
            echo "key=schools-experience.dev.terraform" >> $GITHUB_OUTPUT
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

        if [ "${{inputs.environment }}" == "Staging" ]
        then
            echo "control=staging" >> $GITHUB_OUTPUT
            echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-staging" >> $GITHUB_OUTPUT
            echo "key=schools-experience.staging.terraform" >> $GITHUB_OUTPUT
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

        if [ "${{inputs.environment }}" == "Production" ]
        then
            echo "control=production" >> $GITHUB_OUTPUT
            echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-production" >> $GITHUB_OUTPUT
            echo "key=schools-experience.production.terraform" >> $GITHUB_OUTPUT
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

        if [ "${{inputs.environment }}" == "Production" ]
        then
              echo "deploy_url=https://get-schools-experience-${{ env.aks_app_environment }}.teacherservices.cloud" >> $GITHUB_OUTPUT
            else
              echo "deploy_url=https://get-schools-experience-${{ env.aks_app_environment }}.${cluster}.teacherservices.cloud" >> $GITHUB_OUTPUT
        fi

    - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - uses: DFE-Digital/github-actions/set-arm-environment-variables@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}

    - name: Print Sha
      id: print-sha
      shell: bash
      run: |
        echo "${{ inputs.sha }}"

    - name: Terraform init, plan & apply
      shell: bash
      run: make ci ${{ inputs.environment }} terraform-apply
      env:
        IMAGE_TAG: ${{ inputs.sha }}
