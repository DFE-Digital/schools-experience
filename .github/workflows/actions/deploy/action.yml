name: Deploy to AKS
description: deploys application
inputs:
  environment:
    description: Environment to deploy to
    required: true
  sha:
    description: Commit sha to be deployed
    required: true
  azure-credentials:
    description: Credentials for azure
    required: true
  pr:
    description: Pull Request Reference
    required: false
  secure-username:
    description: secured username used to get healthcheck
    required: true
  secure-password:
    description: secured password used to get healthcheck
    required: true

outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}
  dsi-hostname:
    value: ${{ steps.dsi_hostname.outputs.dsi_hostname }}
runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/aks/config/${{ inputs.environment }}.tfvars.json
        echo "Â tf_vars_file is $tf_vars_file"
        terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/terraform.tf | grep -o [0-9\.]*)
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        cluster=$(jq -r '.cluster' ${tf_vars_file})
        echo "cluster=$cluster" >> $GITHUB_ENV
        echo "app_environment=$(jq -r '.environment' ${tf_vars_file})" >> $GITHUB_ENV
        echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV
        echo "namespace=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV

        case "${{ inputs.environment }}" in
          development)
          echo "deploy_url=https://get-school-experience-development.$cluster.teacherservices.cloud" >> $GITHUB_ENV
          ;;
          staging)
          echo "deploy_url=https://get-school-experience-staging.$cluster.teacherservices.cloud" >> $GITHUB_ENV
          ;;
          review)
          echo "deploy_url=https://get-school-experience-review-pr-${{ inputs.pr }}.$cluster.teacherservices.cloud" >> $GITHUB_ENV
          ;;
          production)
          echo "deploy_url=https://get-school-experience-production.teacherservices.cloud" >> $GITHUB_ENV
          ;;
         *)
          echo "unknown cluster"
          ;;
        esac

    - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - uses: DFE-Digital/github-actions/set-arm-environment-variables@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}

    - name: Get Short SHA
      id: sha
      shell: bash
      run: echo "short=$(echo "${{ inputs.sha }}" | cut -c -7)" >> $GITHUB_OUTPUT

    - name: K8 setup for review apps
      if: inputs.environment == 'review'
      shell: bash
      run: |
        az aks get-credentials -g s189t01-tsc-ts-rg -n s189t01-tsc-test-aks

    - name: Terraform init, plan & apply
      shell: bash
      run: |
        envval="${{ inputs.environment }}"
        make ci ${envval} terraform-apply PR_NUMBER=${{ inputs.pr }}
      env:
        IMAGE_TAG: ${{ steps.sha.outputs.short }}

    - name: Smoke tests
      shell: bash
      run: |
               tests/confidence/healthcheck.sh ${{env.deploy_url}}  "${{ steps.sha.outputs.short }}"
      env:
        HTTPAUTH_USERNAME: ${{ inputs.secure-username }}
        HTTPAUTH_PASSWORD: ${{ inputs.secure-password }}

    - name: Retrieve DSI hostname
      id: dsi_hostname
      shell: bash
      run: |
        dsi_hostname=$(terraform -chdir=terraform/aks output -raw dsi_hostname)
        echo "dsi_hostname=${dsi_hostname}" >> "$GITHUB_OUTPUT"
