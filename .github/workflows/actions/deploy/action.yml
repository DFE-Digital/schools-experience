name: Deploy to AKS
description: deploys application
inputs:
  environment:
    description: Environment to deploy to
    required: true
  sha:
    description: Commit sha to be deployed
    required: true
  azure-credentials:
    description: Credentials for azure
    required: true
outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}
runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        echo  ls terraform
        tf_vars_file=terraform/aks/config/${{ inputs.environment }}.tfvars.json
        terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/terraform.tf | grep -o [0-9\.]*)
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "aks_app_environment=$(jq -r '.environment' ${tf_vars_file})" >> $GITHUB_ENV
        echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV
        echo "namespace=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV
        if [[ $cluster == 'production' ]]; then
              echo "deploy_url=https://getintoteachingapi-${{ env.aks_app_environment }}.teacherservices.cloud" >> $GITHUB_OUTPUT
            else
              echo "deploy_url=https://getintoteachingapi-${{ env.aks_app_environment }}.${cluster}.teacherservices.cloud" >> $GITHUB_OUTPUT
        fi

    - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - uses: DFE-Digital/github-actions/set-arm-environment-variables@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}

    - name: Print Sha
      id: print-sha
      shell: bash
      run: |
        echo "${{ inputs.sha }}"
        echo "terraform version is ${{ env.TERRAFORM_VERSION }}"
        echo terraform version
    - name: Terraform init, plan & apply
      shell: bash
      run: make ci ${{ inputs.environment }} terraform-apply-aks
      env:
        IMAGE_TAG: ${{ inputs.sha }}
