name: Deploy to PaaS
inputs:
  environment:
    description: The environment to deploy to Development/Test/Production/Review/Speed/UR etc
    required: true
  sha:
    description: Commit sha to be deployed
    required: true
  pr:
    description: Pull Request Reference
    required: false
  static:
    description: Static Route
    required: false
  AZURE_CREDENTIALS:
    required: true
  KEY_VAULT:
    required: true
  ARM_ACCESS_KEY:
    required: true
  GITHUB_TOKEN:
    required: true

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: set-up-environment
      uses: DFE-Digital/github-actions/set-up-environment@master

    - uses: azure/login@v1
      with:
        creds: ${{ inputs.AZURE_CREDENTIALS }}

    - name: Validate Key Vault Secrets
      uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
      with:
        KEY_VAULT: ${{ inputs.KEY_VAULT }}
        SECRETS: |
          SE-SECRETS
          SE-INFRA-SECRETS

    - name: Get Short SHA
      id: sha
      shell: bash
      run: echo "short=$(echo "${{ inputs.sha }}" | cut -c -7)" >> $GITHUB_OUTPUT

    - name: Setup Environment Variables
      id: variables
      shell: bash
      run: |
        echo RUN_TEST="true" >> $GITHUB_OUTPUT
        if [ "${{inputs.environment }}" == "Review" ]
        then
            echo "control=review" >> $GITHUB_OUTPUT
            pr_name="${{env.REVIEW_APPLICATION}}-${{inputs.pr}}"
            echo "pr_name=${pr_name}" >> $GITHUB_OUTPUT
            echo "healthcheck=${pr_name}" >> $GITHUB_OUTPUT
            echo "key=${pr_name}" >> $GITHUB_OUTPUT
            echo "TF_VAR_paas_application_name=${pr_name}" >> $GITHUB_ENV
            echo "TF_VAR_static_route=${{ inputs.static }}" >> $GITHUB_ENV
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:review-${{steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

        if [ "${{inputs.environment }}" == "Development" ]
        then
            echo "control=dev" >> $GITHUB_OUTPUT
            echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-dev" >> $GITHUB_OUTPUT
            echo "key=schools-experience.dev.terraform" >> $GITHUB_OUTPUT
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

        if [ "${{inputs.environment }}" == "Staging" ]
        then
            echo "control=staging" >> $GITHUB_OUTPUT
            echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-staging" >> $GITHUB_OUTPUT
            echo "key=schools-experience.staging.terraform" >> $GITHUB_OUTPUT
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

        if [ "${{inputs.environment }}" == "Production" ]
        then
            echo "control=production" >> $GITHUB_OUTPUT
            echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-production" >> $GITHUB_OUTPUT
            echo "key=schools-experience.production.terraform" >> $GITHUB_OUTPUT
            echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT
        fi

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.AZURE_CREDENTIALS }}

    - uses: DfE-Digital/keyvault-yaml-secret@v1
      id: keyvault-infra-secret
      with:
        keyvault: ${{ inputs.KEY_VAULT}}
        secret: SE-INFRA-SECRETS
        key: LOGIT-API

    - uses: DfE-Digital/keyvault-yaml-secret@v1
      id: keyvault-yaml-secret
      with:
        keyvault: ${{ inputs.KEY_VAULT}}
        secret: SE-SECRETS
        key: SECURE_USERNAME , SECURE_PASSWORD

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.8

    - name: Terraform ( ${{inputs.environment}} )
      shell: bash
      run: |
        cd terraform/paas && pwd
        terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
        terraform apply -var-file=${{steps.variables.outputs.control}}.env.tfvars -auto-approve
      env:
        ARM_ACCESS_KEY: ${{ inputs.ARM_ACCESS_KEY  }}
        TF_VAR_paas_docker_image: ${{ steps.variables.outputs.docker_image}}
        TF_VAR_AZURE_CREDENTIALS: ${{ inputs.AZURE_CREDENTIALS }}

    - name: Smoke tests
      shell: bash
      run: |
        if [ "${{steps.variables.outputs.RUN_TEST}}" == "true" ]
        then
               tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "${{ steps.sha.outputs.short }}"
        fi
      env:
        HTTPAUTH_USERNAME: ${{steps.keyvault-yaml-secret.outputs.SECURE_USERNAME}}
        HTTPAUTH_PASSWORD: ${{steps.keyvault-yaml-secret.outputs.SECURE_PASSWORD}}

    - name: Log Deployment
      if: always()
      uses: DFE-Digital/github-actions/SendToLogit@master
      with:
        LOGIT-API-KEY: ${{ steps.keyvault-infra-secret.outputs.LOGIT-API }}
        logtype: "github"
        JSON: |
          '{"Application" : "${{env.PAAS_APPLICATION_NAME}}",
            "Status"      : "${{ job.status }}",
            "Action"      : "Deploy",
            "Environment" : "${{inputs.environment}}",
            "Version"     : "${{ inputs.sha }}" }'
