name: Build and Deploy
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE: ${{ steps.docker.outputs.DOCKER_IMAGE }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK'

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: sha
        run:  echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Set DOCKER_IMAGE environment variable
        id:   docker
        run: |
             if [ "${{github.ref}}" == "refs/heads/master" ]
             then
                echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:sha-${{ steps.sha.outputs.short }}
                echo ::set-output name=DOCKER_MASTER::${{ env.DOCKER_REPOSITORY }}:master
             else
                echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:review-${{steps.sha.outputs.short }}
                echo ::set-output name=DOCKER_MASTER::""
             fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v2.6.1
        with:
          cache-from: ${{ env.DOCKER_REPOSITORY }}:master
          builder: ${{ steps.buildx.outputs.name }}
          tags: |
                 ${{ steps.docker.outputs.DOCKER_IMAGE }}
                 ${{ steps.docker.outputs.DOCKER_MASTER }}
          push: true
          build-args:
                 SHA=${{ steps.sha.outputs.short }}

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure building the application'
           SLACK_TITLE: 'Failure Building Application'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  spec_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN , SLACK-WEBHOOK'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Bring up Docker compose Stack
        run: docker-compose -f docker-compose-paas.yml up -d
        env:
          IMAGE: ${{needs.build.outputs.DOCKER_IMAGE}}

      - name: Lint Ruby
        run:  docker run -t --rm -v ${PWD}/out:/app/out -e RAILS_ENV=test ${{needs.build.outputs.DOCKER_IMAGE}}  rubocop app config lib features spec --format json --out=/app/out/rubocop-result.json

      - name: Keep Rubocop output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Rubocop_results
          path: ${{ github.workspace }}/out/rubocop-result.json

      - name: Run Specs
        run:  docker-compose -f docker-compose-paas.yml run --rm db-tasks rspec --format documentation --format RspecSonarqubeFormatter --out /app/out/test-report.xml
        env:
          IMAGE: ${{needs.build.outputs.DOCKER_IMAGE}}

      - name:  Keep Unit Tests Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/test-report.xml


      - name:  Keep Code Coverage Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Code_Coverage
          path: ${{ github.workspace }}/coverage/coverage.json

  security_tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN , SLACK-WEBHOOK'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Scan image
        uses: anchore/scan-action@v2.0.4
        with:
          image: ${{needs.build.outputs.DOCKER_IMAGE}}
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true

      - name: upload Anchore scan SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

      - name: Run Brakeman static security scanner
        run: docker run -t --rm -e RAILS_ENV=test ${{needs.build.outputs.DOCKER_IMAGE}}  brakeman --no-pager

  cucumber_tests:
    name: Cucumber Tests
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN , SLACK-WEBHOOK'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Bring up Docker compose Stack
        run: docker-compose -f docker-compose-paas.yml up -d
        env:
          IMAGE: ${{needs.build.outputs.DOCKER_IMAGE}}

      - name: Run Cucumber Tests
        run: docker-compose -f docker-compose-paas.yml run --rm -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL db-tasks cucumber --profile=${PROFILE} --format junit --out /app/out
        env:
          IMAGE: ${{needs.build.outputs.DOCKER_IMAGE}}
          PROFILE: continuous_integration
          DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: true

      - name:  Keep Unit Tests Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cucumber_tests
          path: ${{ github.workspace }}/out

  selenium_cucumber_tests:
    name: Chrome Cucumber Tests
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN , SLACK-WEBHOOK'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Bring up Docker compose Stack
        run: docker-compose -f docker-compose-paas.yml -f docker-compose-chrome.yml up -d
        env:
          IMAGE: ${{needs.build.outputs.DOCKER_IMAGE}}

      - name: Run Cucumber Tests
        run: |-
             docker-compose -f docker-compose-paas.yml -f docker-compose-chrome.yml run --rm \
                  -e RAILS_ENV \
                  -e SELENIUM_HUB_HOSTNAME \
                  -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL \
                  -e CUC_DRIVER \
                  -e APP_URL \
                  school-experience cucumber -t @javascript  --profile=${PROFILE} --format junit --out /app/out/
        env:
          IMAGE: ${{needs.build.outputs.DOCKER_IMAGE}}
          PROFILE: selenium
          RAILS_ENV: test
          SELENIUM_HUB_HOSTNAME: selenium-chrome
          DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: true
          CUC_DRIVER: chrome
          APP_URL: http://school-experience:3000

      - name:  Keep Unit Tests Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: selenium_cucumber_tests
          path: ${{ github.workspace }}/out

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [ selenium_cucumber_tests, cucumber_tests , security_tests, spec_tests ]
    steps:

      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SONAR-TOKEN'

      - name: Download Test Artifacts
        uses: actions/download-artifact@v2
        with:
            path: ${{ github.workspace }}/out/ 

      - name: Fixup report file paths
        run: sudo sed -i "s?/app/app?/github/workspace/app?" ${{ github.workspace }}/out/Code_Coverage/coverage.json

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.azSecret.outputs.SONAR-TOKEN }}

  prepare:
    name: Configure Matrix Deployments
    needs: [ sonarcloud ]
    runs-on: ubuntu-latest
    outputs:
      matrix_environments: ${{ env.MATRIX_ENVIRONMENTS }}
    steps:
      - name: Set matrix environments (Push to master)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: echo "MATRIX_ENVIRONMENTS={\"environment\":[\"Development\" , \"Staging\",\"Production\"]}" >> $GITHUB_ENV

      - name: Set matrix environments ( Review)
        if: github.event_name == 'pull_request' && github.ref != 'refs/heads/master'
        run: echo "MATRIX_ENVIRONMENTS={\"environment\":[\"Review\"]}" >> $GITHUB_ENV

  deployments:
    name: Deployments
    strategy:
      max-parallel: 1
      matrix: ${{fromJSON(needs.prepare.outputs.matrix_environments)}}
    needs: [ prepare ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Set environment variable
        run: |
           REFERENCE=${{github.ref}}   
           echo "REFERENCE=${REFERENCE}" >> $GITHUB_ENV

      - name: Set Review specific variables
        if: matrix.environment == 'Review' 
        run: |
           REFERENCE=${{github.event.pull_request.head.ref}}   
           echo "REFERENCE=${REFERENCE}" >> $GITHUB_ENV

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SLACK-WEBHOOK, ACTIONS-API-ACCESS-TOKEN'

      - name: Trigger Deployment to ${{matrix.environment}}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy to PaaS
          token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          inputs: '{"environment": "${{matrix.environment}}", "sha": "${{ github.sha }}" , "pr": "${{github.event.number}}" }'
          ref: ${{env.REFERENCE}}

      - name: Wait for Deployment to ${{matrix.environment}}
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-deploy
        with:
          token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          checkName: Deploy ${{ github.sha }} to ${{ matrix.environment  }}
          ref: ${{env.REFERENCE}}
          timeoutSeconds: 1200
          intervalSeconds: 14  

      - name: Check if ${{matrix.environment}} Deployment has returned with a failure
        if: steps.wait-for-deploy.outputs.conclusion != 'success'
        run: exit 1

      - name: Post sticky pull request comment
        if: matrix.environment == 'Review' 
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: Review app deployed to https://${{env.REVIEW_APPLICATION}}-${{github.event.number}}.${{env.DOMAIN}}

      - name: Add Review Label
        if: matrix.environment == 'Review' && contains(github.event.pull_request.user.login, 'dependabot') == false
        uses: actions-ecosystem/action-add-labels@v1.1.3
        with:
          github_token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          labels: Review

      - name: Generate Tag from PR Number
        if: matrix.environment == 'Development' 
        id: tag_version
        uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@master
        with:
          sha: ${{github.sha}}

      - name: Create a GitHub Release
        if: matrix.environment == 'Development' && steps.tag_version.outputs.pr_found == 1
        id: release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.pr_number }}
          body: ${{ steps.tag_version.outputs.pr_number }}
          release_name: Release ${{ steps.tag_version.outputs.pr_number }}
          commitish: ${{ github.sha}}
          prerelease: false

      - name: Copy PR Info to Release
        if: matrix.environment  == 'Development' && steps.release.outputs.id
        uses: DFE-Digital/github-actions/CopyPRtoRelease@master
        with:
          PR_NUMBER:  ${{ steps.tag_version.outputs.pr_number }}
          RELEASE_ID: ${{ steps.release.outputs.id }}
          TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Slack Notification
        if: failure() && matrix.environment == 'Production' 
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_ERROR}}
          SLACK_TITLE: Failure in Post-Development Deploy
          SLACK_MESSAGE: Failure with initialising ${{matrix.environment}} deployment for ${{env.APPLICATION}}
          SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  owasp:
    name: 'OWASP Test'
    runs-on: ubuntu-latest
    needs: [  deployments  ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1.2
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SLACK-WEBHOOK, HTTPAUTH-USERNAME, HTTPAUTH-PASSWORD'

      - name: Setup Authorization
        run: |
             BASE=$( echo "${{steps.azSecret.outputs.HTTPAUTH-USERNAME}}:${{steps.azSecret.outputs.HTTPAUTH-PASSWORD}}" | base64 )
             echo "replacer.full_list(0).description=auth1"           >  ./options.prop
             echo "replacer.full_list(0).enabled=true"                >> ./options.prop
             echo "replacer.full_list(0).matchtype=REQ_HEADER"        >> ./options.prop
             echo "replacer.full_list(0).matchstr=Authorization"      >> ./options.prop
             echo "replacer.full_list(0).regex=false"                 >> ./options.prop
             echo "replacer.full_list(0).replacement=Basic ${BASE}"   >> ./options.prop

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://${{env.PAAS_APPLICATION_NAME}}-dev.${{env.DOMAIN}}/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-z "-configFile /zap/wrk/options.prop" '

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_FAILURE}}
           SLACK_MESSAGE: 'Pipeline Failure carrying out OWASP Testing on https://${{env.PAAS_APPLICATION_NAME}}-dev.${{env.DOMAIN}}/'
           SLACK_TITLE: 'Failure: OWSAP Testing has failed on  Development'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}


