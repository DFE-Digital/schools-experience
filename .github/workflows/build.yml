name: Build and Deploy
on:
  repository_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master
env:
  DOCKERHUB_REPOSITORY: dfedigital/school-experience
  CONTAINER: school-experience

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6.6' # Version range or exact version of a Ruby version to use, using semvers version range syntax.

      - uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Install Bundler
        run: |-
          gem install bundler --version=2.1.4

      - name: Bundle install
        run: |
          bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java
          bundle config set without development
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Run Brakeman security scan
        run: |-
          bundle exec \
            brakeman --no-pager

      - name: Run GovUK Lint check
        run: |-
          bundle exec \
            rubocop app config lib features spec spec_external --format clang

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(git rev-parse --short $GITHUB_SHA)

      - name: Build Only
        uses: docker/build-push-action@v2
        if: github.ref != 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.APP_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          push: false
          build_args: APP_SHA=${{ steps.sha.outputs.short }}

      - name: Set DOCKER_IMAGE environment variable
        run: |-
          echo ::set-env name=DOCKER_IMAGE::${{ env.DOCKERHUB_REPOSITORY }}:sha-$(echo "${{ github.sha }}" | cut -c -7)

      - name: Create Docker Compose stack
        run: |-
          docker-compose -f docker-compose-local.yml up -d
          WAIT_COUNT=0
          until docker-compose ps | grep -m 1 "db-tasks" | grep -m 1 "Exit 0" || [ $WAIT_COUNT -eq 12 ] ; do echo "WAIT COUNT $(( WAIT_COUNT++ ))" && sleep 5 ; done

      - name: Run Specs
        run: |-
          docker-compose -f docker-compose-local.yml run --rm db-tasks \
            rspec --format progress --format RspecJunitFormatter --out /ci_build/rspec_results.xml --format documentation

      - name: Run Cucumber features
        run: |-
          docker-compose -f docker-compose-local.yml run --rm -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true db-tasks \
            cucumber --profile=$(CUCUMBER_PROFILE) --format junit --out /ci_build/junit --format documentation
