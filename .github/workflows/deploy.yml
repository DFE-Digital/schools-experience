name: Deploy to PaaS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment to deploy to Development/Staging/Production/Review etc
        required: true
      sha:
        description: Commit sha to be deployed
        required: true
      pr:
        description: Pull Request Reference
        required: false
      static:
        description: Static Route
        required: false

jobs:
  validate:
    name: Validate Secrets
    runs-on: ubuntu-latest
    environment:
       name: ${{ github.event.inputs.environment }}
    steps:
       - name: Checkout
         uses: actions/checkout@v2.3.5

       - uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}

       - name: Validate Key Vault Secrets
         uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
         with:
           KEY_VAULT: ${{ secrets.KEY_VAULT }}
           SECRETS: |
                SE-SECRETS 
                SE-INFRA-SECRETS 

  turnstyle:
    name: Wait for any previous deployments
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          continue-after-seconds: 300
          same-branch-only: false

  deploy:
    name: Deploy ${{ github.event.inputs.sha }} to ${{ github.event.inputs.environment }}
    environment: 
       name: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: turnstyle

    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout
        uses: actions/checkout@v2.3.5

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(echo "${{ github.event.inputs.sha }}" | cut -c -7)

      - name: Setup Environment Variables
        id: variables
        run: |
             echo ::set-output name=RUN_TEST::"true"
             if [ "${{github.event.inputs.environment }}" == "Review" ]
             then
                 echo ::set-output name=control::$(echo "review" )
                 pr_name="${{env.REVIEW_APPLICATION}}-${{github.event.inputs.pr}}"
                 echo ::set-output name=pr_name::${pr_name}
                 echo ::set-output name=healthcheck::${pr_name}
                 echo ::set-output name=key::${pr_name}
                 echo "TF_VAR_paas_application_name=${pr_name}" >> $GITHUB_ENV
                 echo "TF_VAR_static_route=${{ github.event.inputs.static }}" >> $GITHUB_ENV
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:review-${{steps.sha.outputs.short}}
             fi

             if [ "${{github.event.inputs.environment }}" == "Development" ]
             then
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-dev" )
                 echo ::set-output name=key::"schools-experience.dev.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

             if [ "${{github.event.inputs.environment }}" == "Staging" ]
             then
                 echo ::set-output name=control::$(echo "staging" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-staging" )
                 echo ::set-output name=key::"schools-experience.staging.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

             if [ "${{github.event.inputs.environment }}" == "Production" ]
             then
                 echo ::set-output name=control::$(echo "production" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-production" )
                 echo ::set-output name=key::"schools-experience.production.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'LOGIT-API, HTTPAUTH-USERNAME, HTTPAUTH-PASSWORD'

      - uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 0.14.9

      - name: Wait for any previous runs to complete
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          continue-after-seconds: 180

      - name: Start ${{ github.event.inputs.environment }} Deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ github.event.inputs.environment }}
          ref: ${{ github.event.inputs.sha }}

      - name: Terraform ( ${{github.event.inputs.environment}} )
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
            terraform apply -var-file=${{steps.variables.outputs.control}}.env.tfvars -auto-approve
        env:
          ARM_ACCESS_KEY:               ${{ secrets.ARM_ACCESS_KEY  }}
          TF_VAR_paas_docker_image:     ${{ steps.variables.outputs.docker_image}}
          TF_VAR_AZURE_CREDENTIALS:     ${{ secrets.AZURE_CREDENTIALS }}

      - name: Smoke tests
        run: |
            if [ "${{steps.variables.outputs.RUN_TEST}}" == "true" ]
            then
                   tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "${{ steps.sha.outputs.short }}"
            fi
        env:
             HTTPAUTH_USERNAME: ${{steps.azSecret.outputs.HTTPAUTH-USERNAME}}
             HTTPAUTH_PASSWORD: ${{steps.azSecret.outputs.HTTPAUTH-PASSWORD}}
            
      - name: Update ${{ github.event.inputs.environment }} status
        if: always()
        uses: bobheadxi/deployments@v0.6.0
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Log Deployment
        if: always()
        uses: DFE-Digital/github-actions/SendToLogit@master
        with:
           LOGIT-API-KEY: ${{ steps.azSecret.outputs.LOGIT-API }}
           logtype: "github"
           JSON: |
                '{"Application" : "${{env.PAAS_APPLICATION_NAME}}", 
                  "Status"      : "${{ job.status }}",
                  "Action"      : "Deploy",                        
                  "Environment" : "${{github.event.inputs.environment}}",              
                  "Version"     : "${{ github.event.inputs.sha }}" }'
