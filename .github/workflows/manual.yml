---
name: Manual Release
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        type: environment
      tag:
        description: Release Tag
        required: true

jobs:
  manual:
    name: Deploy to ${{github.event.inputs.environment}}
    environment:
       name: ${{github.event.inputs.environment}}

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: SE-INFRA-SECRETS
          key: SLACK-WEBHOOK, SLACK-RELEASE-NOTE-WEBHOOK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Id from Tag
        id: tag_id
        uses: DFE-Digital/github-actions/DraftReleaseByTag@master
        with:
          TAG: ${{ github.event.inputs.tag }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Tag from PR Number
        # if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        id: tag_version
        uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@700-update-set-output-usage-GenerateReleaseFromSHA
        with:
          sha: ${{github.sha}}

      - name: Print outputs
        if: steps.tag_id.outputs.release_id == ''
        run: |
             echo "tag_version.outputs.pr_number: ${{ steps.tag_version.outputs.pr_number }}"
             echo "tag_version.outputs.pr_text: ${{ steps.tag_version.outputs.pr_text }}"
             echo "tag_version.outputs.pr_found: ${{ steps.tag_version.outputs.pr_found }}"

      # - name: Check if found
      #   if: steps.tag_id.outputs.release_id == ''
      #   run: |
      #        echo "::error ::Tag ${{ github.event.inputs.tag }} cannot be found in releases"
      #        exit 1
      #        ${{ steps.tag_version.outputs.pr_number }}

      # - name: Deploy to ${{github.event.inputs.environment}}
      #   uses: ./.github/workflows/actions/deploy
      #   id: deploy
      #   with:
      #     environment: ${{ github.event.inputs.environment }}
      #     sha:  ${{ steps.tag_id.outputs.release_sha }}
      #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      #     KEY_VAULT:         ${{ secrets.KEY_VAULT }}
      #     ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}
      #     GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}

      # - name: Slack Release Notification
      #   if: steps.tag_id.outputs.release_id && github.event.inputs.environment == 'Production'
      #   uses: rtCamp/action-slack-notify@master
      #   env:
      #     SLACK_COLOR: ${{env.SLACK_SUCCESS}}
      #     SLACK_TITLE: "Release Published to ${{github.event.inputs.environment}}: ${{steps.tag_id.outputs.release_name}}"
      #     SLACK_MESSAGE: ${{ fromJson( steps.tag_id.outputs.release_body) }}
      #     SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-RELEASE-NOTE-WEBHOOK }}
      #     MSG_MINIMAL: true

      # - name: Slack Notification
      #   if: failure() && github.event.inputs.environment == 'Production'
      #   uses: rtCamp/action-slack-notify@master
      #   env:
      #     SLACK_COLOR: ${{env.SLACK_FAILURE}}
      #     SLACK_TITLE: "Manual Release Failed: ${{steps.tag_id.outputs.release_name}}"
      #     SLACK_MESSAGE: Failure deploying ${{github.event.inputs.environment}} release
      #     SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-WEBHOOK }}
