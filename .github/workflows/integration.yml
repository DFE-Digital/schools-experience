name: Continuous Integration
on:
  push:
    branches: [ master ]

env:
  DOCKER_ORGANISATION: mattonfoot
  DOCKER_CONTAINER: school-experience
  CUCUMBER_PROFILE: continuous_integration
  SELENIUM_PROFILE: selenium

jobs:
  secrets:
    name: Get secrets from Key vault
    runs-on: ubuntu-18.04

    outputs:


    steps:
      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Allow access from agent to key vault
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az keyvault network-rule add \
              --name $(vaultName) \
              --ip-address 0.0.0.0/0

      - name: "Azure Key Vault: s105d01-dev-vault"
        id: key-vault-secrets
        uses: Azure/get-keyvault-secrets@v1.0
        with:
          keyvault: "s105d01-dev-vault"
          secrets: "*"

      - name: Close access from agent to key vault
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az keyvault network-rule remove \
              --name $(vaultName) \
              --ip-address 0.0.0.0/0

  deploy:
    name: Deploy application
    runs-on: ubuntu-18.04
    needs: secrets

    steps:
      - name: Checkout Dev ops scripts
        uses: actions/checkout@v2
        with:
          repository: DFE-Digital/school-experience-devops

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare build parameters
        id: build-params
        run: |
          IMAGE="${DOCKER_ORGANISATION}/${DOCKER_CONTAINER}"
          AGENT_IP_ADDRESS=$(curl -s https://api.ipify.org)
          VERSION=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE}:${MINOR},${IMAGE}:${MAJOR},${IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          CACHE_KEY=`cat Dockerfile .dockerignore Gemfile Gemfile.lock package.json yarn.lock | shasum | cut -d ' ' -f 1`
          echo ::set-output name=cache_key::${CACHE_KEY}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=image::${IMAGE}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=agent_ip_address::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=AGENT_IP_ADDRESS::${AGENT_IP_ADDRESS}

      - name: Check Cucumber is being run at the same commit point
        if: false # disabled
        run: |
          CUCUMBER_SOURCE_VERSION=$(Release.Artifacts._DFE-Digital_schools-experience.BuildId)
          CI_SOURCE_VERSION=$(Build.SourceVersion)

          echo "CI commit is $CI_SOURCE_VERSION"
          echo "Cucumber code that will be run is at $CUCUMBER_SOURCE_VERSION"

          if [ "$CI_SOURCE_VERSION" != "$CUCUMBER_SOURCE_VERSION" ]; then
            echo "TL;DR - the commit ids of the cucumber tests checkout and the CI source code don't match - do a fresh build"
            echo ""
            echo "The CD pipeline takes the CI build artifacts and then does a second checkout of the source code repo so that the cucumber tests can be run. There is limitation in the second checkout via Azure DevOps in that it is not possible to specify the commit id as that used within the CI build. The closest we can get is 'latest' on the default branch (master). This means that it is possible that the commit ids could be different, though this is unlikely."
            exit 1
          fi

      - name: Create docker compose file
        run: |
          REGISTRY_HOST="registry-1.docker.io"
          IMAGE_NAME="dfedigital/school-experience"
          IMAGE_TAG=$(schoolExperienceImageTag)
          cat <<EOF >> compose-school-experience.yml
          version: '3.3'
          services:
            school-experience:
              image: ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
              ports:
                - "3000:3000"
              restart: always
              healthcheck:
                disable: true
          delayed-jobs:
            image: ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
            command: rake jobs:work
            restart: always
            healthcheck:
              disable: true
          EOF
          echo "Using the following compose file..."
          cat compose-school-experience.yml

      - name: Create parameters file
        run: |
          cat <<EOF >> parameters-dev.json
          {
            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "databases_school_experience_name": {"value": "$(databaseName)"},
              "servers_db_name": {"value": "$(databaseServerName)"},
              "vaultName": {"value": "$(vaultName)"},
              "vaultResourceGroupName": {"value": "$(vaultResourceGroupName)"},
              "serverfarms_serviceplan_name": {"value": "$(serverfarms_serviceplan_name)"},
              "sites_school_experience_name": {"value": "$(webAppName)"},
              "redis_name": {"value": "$(redis_name)"},
              "servers_db_createMode": {"value": "Default"},
              "environmentName": {"value": "dev"},
              "redisStorageAccountName": {"value": "schexpstoragedev"},
              "appSecureUsername": {"value": ""},
              "appSecurePassword": {"value": ""},
              "notifyApiKey": {"value":""},
              "_artifactsLocation": {"value": "https://raw.githubusercontent.com/DFE-Digital/school-experience-devops/$(Release.Artifacts.sourcedevops.BuildId)/"},
              "postgresUserLoginName": {"value":"railsappuser"},
              "websiteDeploymentName": {"value":"website"},
              "webAppSku": { "value": { "name": "B3" } },
              "applyRedisFirewall": {"value": false},
              "applyPostgresFirewall": {"value": false}
            }
          }
          EOF
          echo "Using the following dev parameters file..."
          cat parameters-dev.json

      - name: Add Version Tag
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az resource tag \
              --tags version=$(schoolExperienceImageTag) \
              -g $(resourceGroupName) \
              -n $(webAppName) \
              --resource-type "Microsoft.Web/sites"

      - name: Migrate Database

      - name: Create or Update Resource Group Deployment
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az group deployment create \
              --name schoolExperienceDeployment \
              --resource-group $(resourceGroupName) \
              --template-uri https://raw.githubusercontent.com/DFE-Digital/school-experience-devops/$(Release.Artifacts.sourcedevops.BuildId)/template.json \
              --parameters @parameters-dev.json dockerComposeFile=@compose-school-experience.yml

  migrate-database:
    name: Migrate multiple app database
    runs-on: ubuntu-18.04
    needs: [ secrets, deploy ]

    # run as 5 parallel jobs

    #if: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    steps:
      - name: Set Image Tag Variable Name and Agent Ip Address
        run: |
          AGENT_IP_ADDRESS=$(curl -s https://api.ipify.org)
          IMAGE_TAG=v${BUILD_BUILDID}
          if [ $BUILD_SOURCEBRANCHNAME <> 'master' ]; then
            IMAGE_TAG=${IMAGE_TAG}-${BUILD_SOURCEBRANCHNAME}
          fi

          echo ::set-output name=agentIpAddress::${AGENT_IP_ADDRESS}
          echo ::set-output name=schoolExperienceImageTag::${IMAGE_TAG}
          echo ::set-output name=schoolExperienceImageTagStable::${IMAGE_TAG}-stable

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Allow access from agent to key vault
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az keyvault network-rule add \
              --name $(vaultName) \
              --ip-address 0.0.0.0/0

      - name: "Azure Key Vault: s105d01-dev-vault"
        id: secrets
        uses: Azure/get-keyvault-secrets@v1.0
        with:
          keyvault: "s105d01-dev-vault"
          secrets: "*"

      - name: Migrate Database for app
        env:
          RAILS_ENV=servertest
          DB_HOST=$(databaseHost)
          DB_DATABASE=$(databaseName)1
          DB_USERNAME=railsappuser1@$(databaseServerName)
          DB_PASSWORD=$(postgresUserPassword)
          SECRET_KEY_BASE=stubbed
          SKIP_REDIS=true
        run: |
          docker-compose run -t rake db:migrate


  deploy-instance:
    name: deploy multiple app instances
    runs-on: ubuntu-18.04
    needs: [ secrets, migrate-database ]

    #if: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    steps:
      - name:

  functional-tests:
    name: Functional test via Docker
    runs-on: ubuntu-18.04
    needs: [ secrets, deploy-instance ]

    #if: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    steps:
      - name:

  tag-image:
    name: tag image as STABLE
    runs-on: ubuntu-18.04
    needs: [ secrets, functional-tests ]

    #if: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    steps:
      - name:
