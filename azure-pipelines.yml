pool:
  vmImage: 'ubuntu-16.04'

variables:
  imageName: school-experience
  imageTag: v$(Build.BuildId)
  POSTGRES_IMAGE: mdillon/postgis:11-alpine
  # define three more variables dockerId, dockerPassword and dockerRegistry in the build pipeline in UI
  POSTGRESS_PASSWORD: secret
  DATABASE_URL: postgis://postgres:secret@postgres/school_experience_test
  SECRET_KEY_BASE: stubbed
  REDIS_IMAGE: redis:5-alpine
  CUCUMBER_PROFILE: continuous_integration
  APP_URL: http://school-experience:3000

steps:
  - script: docker login $(dockerRegistry) -u $(dockerId) -p $pswd
    env:
      pswd: $(dockerPassword)
    displayName: 'Docker login'
  
  - script: docker pull $(dockerRegistry)/$(imageName):latest || true
    displayName: Retrieve latest Docker build to use as cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile --cache-from=$(dockerRegistry)/$(imageName):latest -t $(imageName):latest .
    displayName: Build Docker Image using Cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile -t $(imageName):latest .
    displayName: Build Docker Image without Cache
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: |
      docker-compose up -d
      sleep 15
    displayName: bring up postgres, redis and create database (for the web app) and spin up application

  - script: docker-compose run --rm -e DATABASE_URL -e RAILS_ENV=test school-experience rake db:create db:test:prepare
    displayName: Create Testing databases, import schema and fixtures

  - script: docker-compose run --rm -e DATABASE_URL -e RAILS_ENV=test school-experience rspec
    displayName: Run the Specs

  - script: docker-compose run --rm -e DATABASE_URL -e RAILS_ENV=test -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true school-experience cucumber --profile=continuous_integration
    displayName: Run the Cucumber features

  - script: docker-compose run --rm -e DATABASE_URL -e RAILS_ENV=test school-experience brakeman --no-pager
    displayName: Run the Brakeman security scan

  - script: docker-compose run --rm -e DATABASE_URL -e RAILS_ENV=test school-experience govuk-lint-ruby app lib spec
    displayName: Run the GovUK Lint check

  - script: docker-compose -f docker-compose.yml -f docker-compose-selenium.yml up -d
    displayName: spin up selenium nodes

  - script: docker-compose -f docker-compose.yml -f docker-compose-selenium.yml run --rm -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium-chrome -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e APP_URL school-experience cucumber
    condition: not(eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Run Cucumber via Selenium Chrome

  - script: docker-compose -f docker-compose.yml -f docker-compose-selenium.yml run --rm -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium-firefox -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e APP_URL -e CUC_DRIVER=firefox school-experience cucumber
    condition: not(eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Run Cucumber via Selenium Firefox

  - script: |
      docker tag $(imageName):latest $(dockerRegistry)/$(imageName):latest
      docker push $(dockerRegistry)/$(imageName):latest
      docker tag $(dockerRegistry)/$(imageName):latest $(dockerRegistry)/$(imageName):$(imageTag)
      docker push $(dockerRegistry)/$(imageName):$(imageTag)
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: 'Push Docker image (built from master)'

  - task: CopyFiles@2
    inputs:
      contents: 'script/compose-school-experience.sh'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy Docker Compose file to staging area'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/script/compose-school-experience.sh
      artifactName: 'compose-file'
    displayName: 'Publish the Docker Compose file'
