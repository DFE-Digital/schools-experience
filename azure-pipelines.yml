pool:
  vmImage: ubuntu-18.04

trigger:
  branches:
    include:
    - '*'

variables:
  imageTag: v$(Build.BuildId)
  # define four more variables imageName, DOCKER_HUB_REPO in the build pipeline in UI
  CUCUMBER_PROFILE: continuous_integration
  SELENIUM_PROFILE: selenium
  APP_URL: http://school-experience:3000

jobs:
- job: BuildAndTesting

  steps:

  - script: echo $(Build.Reason)
    displayName: Build trigger

  - script: |
      DEPENDENCY_TAG=`cat Dockerfile .dockerignore Gemfile Gemfile.lock package.json yarn.lock | shasum | cut -d ' ' -f 1`
      echo "##vso[task.setvariable variable=buildCacheTag]${DEPENDENCY_TAG}"
    displayName: Calculate build cache tag

  - script: echo "dependencies tag is $(buildCacheTag)"
    displayName: Show build cache tag

  - script: |
      docker pull $(DOCKER_HUB_REPO):$(buildCacheTag) || true
      docker build -f Dockerfile --cache-from=$(DOCKER_HUB_REPO):$(buildCacheTag) -t $(DOCKER_HUB_REPO):$(imageTag) .
    displayName: Build Docker Image using Cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile -t $(DOCKER_HUB_REPO):$(imageTag) .
    displayName: Build Docker Image without Cache
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker run --rm $(DOCKER_HUB_REPO):$(imageTag) brakeman --no-pager
    displayName: Run the Brakeman security scan

  - script: docker run --rm $(DOCKER_HUB_REPO):$(imageTag) rubocop app config lib features spec spec_external
    displayName: Run the GovUK Lint check

  - script: docker tag $(DOCKER_HUB_REPO):$(imageTag) $(DOCKER_HUB_REPO):$(buildCacheTag)
    displayName: Tag build cache image
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))

  - task: Docker@2
    displayName: 'Upload build cache image to DockerHub'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(buildCacheTag)

  - script: docker tag $(DOCKER_HUB_REPO):$(imageTag) school-experience:latest
    displayName: Tag built image as latest

  - script: |
      docker-compose up -d
      WAIT_COUNT=0
      until docker-compose ps | grep -m 1 "db-tasks" | grep -m 1 "Exit 0" || [ $WAIT_COUNT -eq 12 ]; do echo "WAIT COUNT $(( WAIT_COUNT++ ))" && sleep 5 ; done
    displayName: bring up postgres, redis and create database (for the web app) and spin up application

  - script: docker-compose run --rm db-tasks rspec --format progress --format RspecJunitFormatter --out /ci_build/rspec_results.xml
    displayName: Run the Specs

  - task: PublishTestResults@2
    # condition: failed()
    displayName: Upload RSpec results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: rspec_results.xml
      testRunTitle: RSpec results

  - script: docker-compose run --rm -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true db-tasks cucumber --profile=$(CUCUMBER_PROFILE) --format junit --out /ci_build/junit
    displayName: Run the Cucumber features

  - task: PublishTestResults@2
    # condition: failed()
    displayName: Upload Cucumber results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit/TEST-*.xml'
      testRunTitle: Cucumber results

  - script: |
      docker-compose -f docker-compose.yml -f docker-compose-chrome.yml up -d
      WAIT_COUNT=0
      until docker-compose ps | grep -m 1 "db-tasks" | grep -m 1 "Exit 0" || [ $WAIT_COUNT -eq 12 ]; do echo "WAIT COUNT $(( WAIT_COUNT++ ))" && sleep 5 ; done
      docker-compose -f docker-compose.yml -f docker-compose-chrome.yml run --rm \
        -e RAILS_ENV=test \
        -e SELENIUM_HUB_HOSTNAME=selenium-chrome \
        -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true \
        -e APP_URL \
        -e CUC_DRIVER=chrome \
        --no-deps \
        school-experience cucumber -t @javascript --profile=$(SELENIUM_PROFILE) --format junit --out /ci_build/junit
    displayName: Run Javascript Cucumber Tests with Chrome

  - task: PublishTestResults@2
    displayName: Upload Javascript Cucumber results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit/TEST-*.xml'
      testRunTitle: Javascript Cucumber results

  - script: |
      docker tag $(DOCKER_HUB_REPO):$(imageTag) $(DOCKER_HUB_REPO):latest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Tag Docker image (built from master)'

  - script: |
      docker tag $(DOCKER_HUB_REPO):$(imageTag) $(DOCKER_HUB_REPO):$(imageTag)-debug
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/debug'))
    displayName: 'Tag Docker image (built from debug)'

  - task: Docker@2
    displayName: 'Push tagged image to DockerHub'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/debug')))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(imageTag)

  - task: Docker@2
    displayName: 'Push :latest to DockerHub'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: latest

  - task: Docker@2
    displayName: 'Push :debug to DockerHub'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/debug'))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(imageTag)-debug

  - script: |
             echo "{" > build_info.json
             echo "PullRequest: $(System.PullRequest.PullRequestId)" >> build_info.json
             echo "}" >> build_info.json
    displayName: 'Produce Build Information File'
  
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/build_info.json'
      artifact: 'build_info'
      publishLocation: 'pipeline'
    displayName: 'Publish Build Information Artifact'