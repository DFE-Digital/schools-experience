pool:
  vmImage: 'ubuntu-16.04'

variables:
  imageTag: v$(Build.BuildId)
  POSTGRES_IMAGE: mdillon/postgis:11-alpine
  # define four more variables imageName, dockerId, dockerPassword and dockerRegistry in the build pipeline in UI
  POSTGRESS_PASSWORD: secret
  DATABASE_URL: postgis://postgres:secret@postgres/school_experience_test
  WEB_URL: postgis://postgres:secret@postgres/school_experience
  SECRET_KEY_BASE: stubbed
  REDIS_IMAGE: redis:5-alpine
  REDIS_URL: redis://redis:6379/1
  CUCUMBER_PROFILE: continuous_integration

steps:

  - script: docker login $(dockerRegistry) -u $(dockerId) -p $pswd
    env:
      pswd: $(dockerPassword)
    displayName: 'Docker login'

  - script: docker run --name=postgres -e POSTGRES_PASSWORD -d $(POSTGRES_IMAGE)
    displayName: Launch Postgres # done early to give it time to boot
  - script: docker run --name=redis -d $(REDIS_IMAGE)
    displayName: Launch Redis # done early to give it time to boot

  - script: docker pull $(dockerRegistry)/$(imageName):latest || true
    displayName: Retrieve latest Docker build to use as cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile --cache-from=$(dockerRegistry)/$(imageName):latest -t $(dockerRegistry)/$(imageName):$(imageTag) .
    displayName: Build Docker Image using Cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile -t $(dockerRegistry)/$(imageName):$(imageTag) .
    displayName: Build Docker Image without Cache
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker run --rm --link postgres:postgres -e DATABASE_URL --link redis:redis -e REDIS_URL -e RAILS_ENV=test $(dockerRegistry)/$(imageName):$(imageTag) rake db:create db:test:prepare
    displayName: Create Testing databases, import schema and fixtures
  - script: docker run --rm --link postgres:postgres -e DATABASE_URL --link redis:redis -e REDIS_URL -e RAILS_ENV=test $(dockerRegistry)/$(imageName):$(imageTag) rspec
    displayName: Run the Specs
  - script: docker run --rm --link postgres:postgres -e DATABASE_URL --link redis:redis -e REDIS_URL -e RAILS_ENV=test -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e CUC_PAGE_DELAY=0 $(dockerRegistry)/$(imageName):$(imageTag) cucumber --profile=$(CUCUMBER_PROFILE)
    displayName: Run the Cucumber features
  - script: docker run --rm --link postgres:postgres -e DATABASE_URL --link redis:redis -e REDIS_URL -e RAILS_ENV=test $(dockerRegistry)/$(imageName):$(imageTag) brakeman --no-pager
    displayName: Run the Brakeman security scan
  - script: docker run --rm --link postgres:postgres --link redis:redis -e DATABASE_URL="$WEB_URL" -e REDIS_URL -e SECRET_KEY_BASE=stubbed $(dockerRegistry)/$(imageName):$(imageTag) rake db:create db:schema:load
    displayName: Create Smoketest database and import schema
  - script: docker run -d --name=smoketest --health-interval=4s --link postgres:postgres --link redis:redis -e RAILS_ENV=servertest -e DATABASE_URL="$WEB_URL" -e REDIS_URL -e SECRET_KEY_BASE=stubbed -e SKIP_FORCE_SSL=true $(dockerRegistry)/$(imageName):$(imageTag)
    displayName: Spin up app
  - script: sleep 15 # ugly but gives the web app time to boot
    displayName: Pause to allow app to boot
  - script: docker ps | grep smoketest | grep '(healthy)' || false
    displayName: Check app reports as Healthy
  - script: docker run --rm --link postgres:postgres --link redis:redis -e DATABASE_URL -e REDIS_URL -e RAILS_ENV=test $(dockerRegistry)/$(imageName):$(imageTag) govuk-lint-ruby app lib spec
    displayName: Run the GovUK Lint check

  - script: |
      docker run --name=selenium-chrome -d --link smoketest:school-experience -v /dev/shm:/dev/shm selenium/standalone-chrome
      docker run --rm --link postgres:postgres --link=redis:redis --link selenium-chrome:selenium --link smoketest:school-experience -e DATABASE_URL="$WEB_URL" -e REDIS_URL -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e CUC_PAGE_DELAY=0 -e APP_URL='http://school-experience:3000' $(dockerRegistry)/$(imageName):$(imageTag) cucumber
    displayName: Run Cucumber via Selenium Chrome

  - script: |
      docker run --name=selenium-firefox -d --link smoketest:school-experience -v /dev/shm:/dev/shm selenium/standalone-firefox
      docker run --rm --link postgres:postgres --link=redis:redis --link selenium-firefox:selenium --link smoketest:school-experience -e DATABASE_URL="$WEB_URL" -e REDIS_URL -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium -e CUC_DRIVER=firefox -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e CUC_PAGE_DELAY=0 -e APP_URL='http://school-experience:3000' $(dockerRegistry)/$(imageName):$(imageTag) cucumber
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/debug')))
    displayName: Run Cucumber via Selenium Firefox

  - script: |
      docker push $(dockerRegistry)/$(imageName):$(imageTag)
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(dockerRegistry)/$(imageName):latest
      docker push $(dockerRegistry)/$(imageName):latest
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(DOCKER_HUB_REPO):$(imageTag)
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(DOCKER_HUB_REPO):latest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Push Docker image (built from master)'

  - task: Docker@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: login
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      command: login

  - task: Docker@2
    displayName: 'push to docker hub'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(imageTag)

  - task: Docker@2
    displayName: 'push to docker hub'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: latest

  - task: CopyFiles@2
    inputs:
      contents: 'script/compose-school-experience.sh'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy Docker Compose file to staging area'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/script/compose-school-experience.sh
      artifactName: 'compose-file'
    displayName: 'Publish the Docker Compose file'
