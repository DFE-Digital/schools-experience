pool:
  vmImage: ubuntu-18.04

variables:
  imageTag: v$(Build.BuildId)
  # define four more variables imageName, DOCKER_HUB_REPO in the build pipeline in UI
  CUCUMBER_PROFILE: continuous_integration
  APP_URL: http://school-experience:3000

jobs:
- job: BuildAndNonBrowserTesting

  steps:

  - script: echo $(Build.Reason)
    displayName: Build trigger

  - script: |
      DEPENDENCY_TAG=`cat Dockerfile .dockerignore Gemfile Gemfile.lock package.json yarn.lock | shasum | cut -d ' ' -f 1`
      echo "##vso[task.setvariable variable=buildCacheTag]${DEPENDENCY_TAG}"
    displayName: Calculate build cache tag

  - script: echo "dependencies tag is $(buildCacheTag)"
    displayName: Show build cache tag

  - script: |
      docker pull $(DOCKER_HUB_REPO):$(buildCacheTag) || true
      docker build -f Dockerfile --cache-from=$(DOCKER_HUB_REPO):$(buildCacheTag) -t $(DOCKER_HUB_REPO):$(imageTag) .
    displayName: Build Docker Image using Cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile -t $(DOCKER_HUB_REPO):$(imageTag) .
    displayName: Build Docker Image without Cache
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker tag $(DOCKER_HUB_REPO):$(imageTag) $(DOCKER_HUB_REPO):$(buildCacheTag)
    displayName: Tag build cache image
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))

  - task: Docker@2
    displayName: 'Upload build cache image to DockerHub'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(buildCacheTag)

  - script: docker tag $(DOCKER_HUB_REPO):$(imageTag) school-experience:latest
    displayName: Tag built image as latest

  - script: |
      docker-compose up -d
      WAIT_COUNT=0
      until docker-compose ps | grep -m 1 "db-tasks" | grep -m 1 "Exit 0" || [ $WAIT_COUNT -eq 12 ]; do echo "WAIT COUNT $(( WAIT_COUNT++ ))" && sleep 5 ; done
    displayName: bring up postgres, redis and create database (for the web app) and spin up application

  - script: docker-compose run --rm db-tasks rspec --format progress --format RspecJunitFormatter --out /ci_build/rspec_results.xml
    displayName: Run the Specs

  - task: PublishTestResults@2
    condition: failed()
    displayName: Upload RSpec results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: rspec_results.xml
      testRunTitle: RSpec results

  - script: docker-compose run --rm -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true db-tasks cucumber --profile=$(CUCUMBER_PROFILE) --format junit --out /ci_build/junit
    displayName: Run the Cucumber features

  - task: PublishTestResults@2
    condition: failed()
    displayName: Upload Cucumber results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit/TEST-*.xml'
      testRunTitle: Cucumber results

  - script: |
      docker tag $(DOCKER_HUB_REPO):$(imageTag) $(DOCKER_HUB_REPO):latest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Tag Docker image (built from master)'

  - script: |
      docker tag $(DOCKER_HUB_REPO):$(imageTag) $(DOCKER_HUB_REPO):$(imageTag)-debug
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/debug'))
    displayName: 'Tag Docker image (built from debug)'

  - script: docker run --rm $(DOCKER_HUB_REPO):$(imageTag) brakeman --no-pager
    displayName: Run the Brakeman security scan

  - script: docker run --rm $(DOCKER_HUB_REPO):$(imageTag) govuk-lint-ruby app config lib features spec spec_external
    displayName: Run the GovUK Lint check

  - task: Docker@2
    displayName: 'Push tagged image to DockerHub'
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(imageTag)

  - task: Docker@2
    displayName: 'Push :latest to DockerHub'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: latest

  - task: Docker@2
    displayName: 'Push :debug to DockerHub'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/debug'))
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(imageTag)-debug

  - task: Bash@3
    name: mtrx
    displayName: 'set up functional test matrix variable'
    inputs:
      targetType: filePath
      filePath: ./script/generate_matrix.sh

- job: FunctionalTesting
  dependsOn: BuildAndNonBrowserTesting
  strategy:
    maxParallel: 5
    matrix: $[ dependencies.BuildAndNonBrowserTesting.outputs['mtrx.legs'] ]

  steps:

  - script: |
      docker pull $(DOCKER_HUB_REPO):$(imageTag)
      docker tag $(DOCKER_HUB_REPO):$(imageTag) school-experience:latest
      docker-compose -f docker-compose.yml -f docker-compose-$(browser).yml up -d
      WAIT_COUNT=0
      until docker-compose ps | grep -m 1 "db-tasks" | grep -m 1 "Exit 0" || [ $WAIT_COUNT -eq 12 ]; do echo "WAIT COUNT $(( WAIT_COUNT++ ))" && sleep 5 ; done
      echo SELENIUM_HUB_HOSTNAME=selenium-$(browser) CUC_DRIVER=$(browser) with features... $(features)
      docker-compose -f docker-compose.yml -f docker-compose-$(browser).yml run --rm -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium-$(browser) -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e APP_URL -e CUC_DRIVER=$(browser) --no-deps school-experience cucumber --format junit --out /ci_build/junit $(features)
    displayName: Run Cucumber Tests

  - task: PublishTestResults@2
    condition: failed()
    displayName: Upload Cucumber results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit/TEST-*.xml'
      testRunTitle: Cucumber results

- job: PublishArtifacts
  dependsOn:
  - FunctionalTesting

  steps:

  - task: CopyFiles@2
    inputs:
      contents: 'script/image_tags_and_ipaddress.sh'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy image tags and ip address script to staging area'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/script/image_tags_and_ipaddress.sh
      artifactName: 'image-tags-ip-script'
    displayName: 'Publish image tags and ip address script'
