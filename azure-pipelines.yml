variables:
  imageTag: v$(Build.BuildId)
  POSTGRES_IMAGE: mdillon/postgis:11-alpine
  # define four more variables imageName, dockerId, dockerPassword and dockerRegistry in the build pipeline in UI
  POSTGRESS_PASSWORD: secret
  SECRET_KEY_BASE: stubbed
  REDIS_IMAGE: redis:5-alpine
  CUCUMBER_PROFILE: continuous_integration
  APP_URL: http://school-experience:3000

jobs:
- job: BuildAndNonBrowserTesting
  pool:
    vmImage: 'ubuntu-16.04'

  steps:

  - script: docker login $(dockerRegistry) -u $(dockerId) -p $pswd
    env:
      pswd: $(dockerPassword)
    displayName: 'Docker login'
  
  - script: docker pull $(dockerRegistry)/$(imageName):latest || true
    displayName: Retrieve latest Docker build to use as cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile --cache-from=$(dockerRegistry)/$(imageName):latest -t $(imageName):latest .
    displayName: Build Docker Image using Cache
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: docker build -f Dockerfile -t $(imageName):latest .
    displayName: Build Docker Image without Cache
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - script: |
      docker-compose up -d
      sleep 15
    displayName: bring up postgres, redis and create database (for the web app) and spin up application

  - script: docker-compose run --rm db-tasks rspec
    displayName: Run the Specs

  - script: docker-compose run --rm -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true db-tasks cucumber --profile=continuous_integration
    displayName: Run the Cucumber features

  - script: docker-compose run --rm db-tasks brakeman --no-pager
    displayName: Run the Brakeman security scan

  - script: docker-compose run --rm db-tasks govuk-lint-ruby app lib spec
    displayName: Run the GovUK Lint check

  - script: |
      docker tag $(imageName):latest $(dockerRegistry)/$(imageName):latest
      docker push $(dockerRegistry)/$(imageName):latest
      docker tag $(dockerRegistry)/$(imageName):latest $(dockerRegistry)/$(imageName):$(imageTag)
      docker push $(dockerRegistry)/$(imageName):$(imageTag)
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(DOCKER_HUB_REPO):$(imageTag)
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: 'Push Docker image (built from master)'

  - task: Docker@2
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: login
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      command: login

  - task: Docker@2
    displayName: 'push to docker hub'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      containerRegistry: $(DOCKER_HUB_CONNECTION_NAME)
      repository: $(DOCKER_HUB_REPO)
      command: push
      tags: $(imageTag)

  - task: Bash@3
    name: mtrx
    displayName: 'set up functional test matrix variable'
    inputs:
      targetType: filePath
      filePath: ./script/generate_matrix.sh

- job: FunctionalTesting
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn: BuildAndNonBrowserTesting
  strategy:
    maxParallel: 5
    matrix: $[ dependencies.BuildAndNonBrowserTesting.outputs['mtrx.legs'] ]

  steps:

  - script: |
      docker login $(dockerRegistry) -u $(dockerId) -p $pswd	      
      docker pull $(dockerRegistry)/$(imageName):latest	
      docker tag $(dockerRegistry)/$(imageName):latest $(imageName):latest
      docker-compose -f docker-compose.yml -f docker-compose-selenium.yml up -d
      sleep 15
      docker-compose -f docker-compose.yml -f docker-compose-selenium.yml run --rm -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium-$(browser) -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e APP_URL -e CUC_DRIVER=$(browser) school-experience cucumber $(features)
    condition: not(eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Run Cucumber via Selenium
    env:
      pswd: $(dockerPassword)

- job: PublishArtifacts
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn:
  - FunctionalTesting

  steps:

  - task: CopyFiles@2
    inputs:
      contents: 'script/compose-school-experience.sh'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy Docker Compose file to staging area'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/script/compose-school-experience.sh
      artifactName: 'compose-file'
    displayName: 'Publish the Docker Compose file'
